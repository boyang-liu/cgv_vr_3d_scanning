#version 460

#extension GL_ARB_compute_variable_group_size : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//layout (local_size_variable) in;

layout (std430, binding = 2) buffer cubeedgesBuffer
{
    int cubes[];
};

layout (std430, binding = 3) buffer tablesBuffer
{
    int edgeTable[256];
    int triTable[256][16];
};

struct Vector
{
    float x, y, z;
};

layout (std430, binding = 4) buffer trinormalsBuffer
{
    Vector trinormals[];
};

layout (std430, binding = 6) buffer verticesBuffer
{
	int vertCount;
    Vector vertices[];
};

struct Triangle
{
    int a, b, c;
};

layout (std430, binding = 5) coherent buffer trianglesBuffer
{
    int triCount;
    Triangle triangles[];
};

layout (std430, binding = 8) buffer normalidBuffer
{   
	//first 16 nums are use to  save the related index of triangle
	// 17 th saves the num of related triangles
    int normalid[];
};



vec3 getVertex(int vertex){

    Vector v = vertices[vertex];
    return vec3(v.x, v.y, v.z);

}

Vector getTriangleNormal(int Va,int Vb,int Vc){

	float edge1x = vertices[Va].x - vertices[Vb].x;
	float edge1y = vertices[Va].y - vertices[Vb].y;
	float edge1z = vertices[Va].z - vertices[Vb].z;

	float edge2x = vertices[Va].x - vertices[Vc].x;
	float edge2y = vertices[Va].y - vertices[Vc].y;
	float edge2z = vertices[Va].z - vertices[Vc].z;

	vec3 edge1 = vec3( edge1x, edge1y, edge1z );
	vec3 edge2 = vec3( edge2x, edge2y, edge2z );

	vec3 trinormal = cross(edge2, edge1);
	return Vector(trinormal.x,trinormal.y,trinormal.z);

}

void main(){
	//ivec3 id = ivec3(gl_GlobalInvocationID);
    int id = int(gl_GlobalInvocationID.x);
    int cubeIndex = id * 13;
	
    // Calculate the triangles of the cube

    int configuration = cubes[cubeIndex+12];
    int triConfigIndex = configuration;

	
    for(int i = 0; triTable[triConfigIndex][i] != -1; i += 3){

        int vertA = cubes[cubeIndex + triTable[triConfigIndex][i]];
        int vertB = cubes[cubeIndex + triTable[triConfigIndex][i+1]];
        int vertC = cubes[cubeIndex + triTable[triConfigIndex][i+2]];

        // Append the triangle in the triangles buffer
        int triIndex = atomicAdd(triCount, 1);
        triangles[triIndex] = Triangle(vertA, vertB, vertC);
		trinormals[triIndex]=getTriangleNormal(vertA,vertB,vertC);

		int num_tri_A = atomicAdd(normalid[vertA*17+16], 1);
		normalid[vertA*17+num_tri_A] = triIndex;
		int num_tri_B = atomicAdd(normalid[vertB*17+16], 1);
		normalid[vertB*17+num_tri_B] = triIndex;
		int num_tri_C = atomicAdd(normalid[vertC*17+16], 1);
		normalid[vertC*17+num_tri_C] = triIndex;
		

    }
}