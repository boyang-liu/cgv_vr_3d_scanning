#version 450


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer depthimageBuffer
{
    int depthimage[];
};


struct rgbcolor
{
    float r, g, b;
};


layout (std430, binding = 11) buffer colorimageBuffer
{
    rgbcolor colorimage[];
};
layout (std430, binding = 12) buffer colorBuffer
{
    rgbcolor vertexcolors[];//grid color info
};



layout (std430, binding = 1) buffer VerticesBuffer	
{
    float TSDF[];//grid tsdf info
};
layout (std430, binding = 9) buffer VerticesweightBuffer
{
    float weights[];//grid weight info
};


uniform ivec3 vereticesGridDims;
uniform vec3  min_pos;
uniform vec3  max_pos;
uniform float voxel_length;

uniform mat3 project_mat;
uniform mat3 inv_project_mat;

uniform int DepthImageWidth;
uniform int DepthImageHeight;

uniform mat3 backrotationmatrix;
uniform vec3 cam_pos;
uniform bool IsFirstFrame;

int indexVertex(int x, int y, int z){

    return x + vereticesGridDims.x * y + vereticesGridDims.x * vereticesGridDims.y * z;

}

vec3 posVertex(int x, int y, int z){

	vec3 pos_V= vec3(min_pos.x+x*voxel_length,min_pos.y+y*voxel_length,min_pos.z+z*voxel_length);
	return pos_V;

}

ivec2 getpixelIndex(float x,float y,float z){

	vec3 pos1 = project_mat * vec3(x/z,y/z,1);
	float x_new=pos1.x;
	float y_new=pos1.y;	
	
	int x_n ,y_n;
	x_n=int(floor(x_new+0.5));
	y_n=int(floor(y_new+0.5));	

	return ivec2(x_n,y_n);

}

void main(){

	ivec3 id = ivec3(gl_GlobalInvocationID);
	
	int x = id.x;
    int y = id.y;
    int z = id.z;

	int idx =indexVertex(x,y,z);

	
	vec3 pos=posVertex(x,y,z);//get the position of the current GridVertex in global coordinate
	vec3 pos2 = backrotationmatrix*(pos-cam_pos);//get the position of the GridVertex in camera coordinate
	pos2=-pos2;
	ivec2 current_pixel = getpixelIndex(pos2.x,pos2.y,pos2.z);

	

	if(current_pixel.x<0 || current_pixel.y<0 || current_pixel.x>=DepthImageWidth || current_pixel.y>=DepthImageHeight){
	
	// outside the range of depth image
		if(IsFirstFrame){

			weights[idx]=0;                                          
			TSDF[idx]=1;
			vertexcolors[idx]=rgbcolor(1.0,1.0,1.0);
		}
		
	}else	
	{

		int current_pixel_id = current_pixel.x + DepthImageWidth * current_pixel.y; 

		if(depthimage[current_pixel_id]==0){

		// out of the range of the detection of infrared camera 
			if(IsFirstFrame){
				weights[idx]=0;                                       
				TSDF[idx]=1;
				vertexcolors[idx]=rgbcolor(1.0,1.0,1.0);
			}

		}else
		{

			float d = float(depthimage[current_pixel_id]) * 0.000125;

			//vec3 p_pixel=vec3((current_pixel.x - cx_d) * d * fx_d,(current_pixel.y - cy_d) * d * fy_d,d);
			vec3 p_pixel=inv_project_mat*vec3(current_pixel.x,current_pixel.y,1);
			p_pixel=vec3(p_pixel.x*d  ,p_pixel.y* d ,  d );

			float sdf=length(p_pixel)-length(pos2);
			float truncated_distance=voxel_length*3;
			float tsdf= sdf/truncated_distance;
			
			if(IsFirstFrame){
				if(tsdf>1||tsdf<-1){
					weights[idx]=0;
					TSDF[idx]=tsdf;	
					//vertexcolors[idx]=colorimage[current_pixel_id];
					vertexcolors[idx]=rgbcolor(colorimage[current_pixel_id].r,colorimage[current_pixel_id].g,colorimage[current_pixel_id].b);

					//vertexcolors[idx]=rgbcolor(0.5,0.5,0.5);


				}else{
					weights[idx]=1;
					TSDF[idx]=tsdf;
					//vertexcolors[idx]=colorimage[current_pixel_id];
					vertexcolors[idx]=rgbcolor(colorimage[current_pixel_id].r,colorimage[current_pixel_id].g,colorimage[current_pixel_id].b);
					//vertexcolors[idx]=rgbcolor(colorimage[current_pixel_id].g,current_pixel_id,0.2);

				

				}
			}else
			{	
			if(tsdf<=1&&tsdf>=-1)			
			{
				TSDF[idx]=(TSDF[idx]*weights[idx]+tsdf)/(weights[idx]+1);
				
				

				//vertexcolors[idx]=(vertexcolors[idx]*weights[idx]+colorimage[current_pixel_id])/(weights[idx]+1);
				vec3 rc=vec3(colorimage[current_pixel_id].r,colorimage[current_pixel_id].g,colorimage[current_pixel_id].b);
				vec3 rc2=vec3(vertexcolors[idx].r,vertexcolors[idx].g,vertexcolors[idx].b);
				vec3 rc3=(rc2*weights[idx]+rc)/(weights[idx]+1);
				vertexcolors[idx]=rgbcolor(rc3.x,rc3.y,rc3.z);

				//vertexcolors[idx]=(vertexcolors[idx]*weights[idx]+colorimage[current_pixel_id])/(weights[idx]+1);
				//vertexcolors[idx]=rgbcolor(0.7,0.7,0.7);


				weights[idx]+=1;
			}
			}
		}


	}
	
}
